<template>
  <div class="hello">
    <b-button @click="openModal" variant="primary">Click here</b-button>

    <b-modal 
      ref="imageModal"
      v-model="showModal" 
      title="Image Preview" 
      size="lg"
      centered
      no-enforce-focus
      @shown="adjustModalSize"
    >
      <div class="image-container">
        <img 
          ref="image"
          alt="Vue logo" 
          src="https://th.bing.com/th/id/OIP.H2U9_k3Gb_Wub_BfJR4MfwHaDO?rs=1&pid=ImgDetMain"
          class="rotating-image"
          :style="{ 
            transform: `rotate(${rotation}deg)`,
            maxHeight: currentMaxHeight
          }"
        >
      </div>

      <template #modal-footer>
        <b-button class="rotate-btn" @click="rotateImage">Rotate</b-button>
      </template>
    </b-modal>
  </div>
</template>

<script>
export default {
  name: "HelloWorld",
  data() {
    return {
      showModal: false,
      rotation: 0,
      currentMaxHeight: '70vh',
      originalWidth: 0,
      originalHeight: 0
    };
  },
  mounted() {
    // Store original image dimensions
    const img = new Image();
    img.src = "https://th.bing.com/th/id/OIP.H2U9_k3Gb_Wub_BfJR4MfwHaDO?rs=1&pid=ImgDetMain";
    img.onload = () => {
      this.originalWidth = img.width;
      this.originalHeight = img.height;
    };
  },
  methods: {
    openModal() {
      this.showModal = true;
    },
    
    rotateImage() {
      this.rotation += 90;
      this.$nextTick(() => {
        this.adjustModalSize();
      });
    },

    adjustModalSize() {
      if (!this.$refs.image) return;

      // Get rotated dimensions
      const isPortrait = this.rotation % 180 !== 0;
      
      // Calculate maximum dimensions
      const windowHeight = window.innerHeight * 0.8;
      const targetHeight = isPortrait 
        ? Math.min(windowHeight, this.originalWidth * (window.innerWidth / this.originalHeight))
        : Math.min(windowHeight, this.originalHeight);

      this.currentMaxHeight = `${targetHeight}px`;

      // Adjust modal body height
      const modalBody = this.$refs.imageModal.$el.querySelector('.modal-body');
      if (modalBody) {
        modalBody.style.minHeight = `${targetHeight + 30}px`;
      }
    }
  }
};
</script>

<style scoped>
.hello {
  text-align: center;
  margin-top: 20px;
}

.image-container {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  height: 100%;
}

.rotating-image {
  object-fit: contain;
  transition: transform 0.5s ease-in-out;
  max-width: 100%;
  transform-origin: center center;
}

::v-deep .modal-content {
  max-height: 90vh;
  overflow: hidden;
}

::v-deep .modal-body {
  padding: 20px;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 400px; /* Fallback height */
  overflow: auto;
}

::v-deep .modal-dialog {
  max-width: 90vw;
  margin-left: auto;
  margin-right: auto;
  transition: all 0.3s ease-in-out;
}

.rotate-btn {
  background-color: #ff9800;
  color: white;
  border: none;
  margin: 0 auto;
  display: block;
}
</style>




For DropBox

<template>
  <div class="hello">
    <b-button @click="openModal" variant="primary">Click here</b-button>

    <b-modal 
      ref="imageModal"
      v-model="showModal" 
      title="Image Preview" 
      size="lg"
      centered
      no-enforce-focus
      @shown="adjustModalSize"
    >
      <div class="image-container">
        <img 
          ref="image"
          alt="Dynamic Image" 
          :src="imageUrl"
          class="rotating-image"
          :style="{ 
            transform: `rotate(${rotation}deg)`,
            maxHeight: currentMaxHeight
          }"
          @load="handleImageLoad"
        >
      </div>

      <template #modal-footer>
        <b-button class="rotate-btn" @click="rotateImage">Rotate</b-button>
      </template>
    </b-modal>
  </div>
</template>

<script>
export default {
  name: "DynamicImageModal",
  props: {
    imageUrl: {
      type: String,
      required: true
    }
  },
  data() {
    return {
      showModal: false,
      rotation: 0,
      currentMaxHeight: '70vh',
      originalWidth: 0,
      originalHeight: 0,
      isImageLoaded: false
    };
  },
  watch: {
    imageUrl(newUrl) {
      // Reset dimensions when image source changes
      this.isImageLoaded = false;
      this.rotation = 0;
      this.currentMaxHeight = '70vh';
      this.loadImageDimensions(newUrl);
    }
  },
  methods: {
    openModal() {
      this.showModal = true;
    },
    
    rotateImage() {
      this.rotation += 90;
      this.$nextTick(() => {
        this.adjustModalSize();
      });
    },

    handleImageLoad() {
      this.loadImageDimensions(this.imageUrl);
      this.adjustModalSize();
    },

    loadImageDimensions(url) {
      const img = new Image();
      img.src = url;
      img.onload = () => {
        this.originalWidth = img.naturalWidth;
        this.originalHeight = img.naturalHeight;
        this.isImageLoaded = true;
        this.adjustModalSize();
      };
      img.onerror = (e) => {
        console.error('Image load error:', e);
        this.isImageLoaded = false;
      };
    },

    adjustModalSize() {
      if (!this.$refs.image || !this.isImageLoaded) return;

      const isPortrait = this.rotation % 180 !== 0;
      const windowHeight = window.innerHeight * 0.8;
      const windowWidth = window.innerWidth * 0.9;
      
      // Calculate dimensions based on rotation
      let targetHeight, targetWidth;
      if (isPortrait) {
        targetWidth = Math.min(windowWidth, this.originalHeight);
        targetHeight = (targetWidth / this.originalHeight) * this.originalWidth;
      } else {
        targetHeight = Math.min(windowHeight, this.originalHeight);
        targetWidth = (targetHeight / this.originalHeight) * this.originalWidth;
      }

      this.currentMaxHeight = `${Math.min(targetHeight, windowHeight)}px`;

      // Adjust modal dimensions
      const modalBody = this.$refs.imageModal.$el.querySelector('.modal-body');
      if (modalBody) {
        modalBody.style.minHeight = `${Math.min(targetHeight + 30, windowHeight)}px`;
      }
    }
  }
};
</script>

<style scoped>
/* Keep previous styles and add these */
.image-container {
  position: relative;
  min-height: 200px; /* Show loader space */
}

.rotating-image {
  opacity: 0;
  transition: opacity 0.3s ease;
}

.rotating-image.loaded {
  opacity: 1;
}

::v-deep .modal-body {
  position: relative;
}

/* Add loading spinner */
.image-container::before {
  content: '';
  position: absolute;
  top: 50%;
  left: 50%;
  width: 40px;
  height: 40px;
  border: 3px solid #f3f3f3;
  border-top: 3px solid #3498db;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  display: none;
}

.image-container.loading::before {
  display: block;
}

@keyframes spin {
  0% { transform: translate(-50%, -50%) rotate(0deg); }
  100% { transform: translate(-50%, -50%) rotate(360deg); }
}
</style>





<!-- Parent component usage -->
<template>
  <div>
    <DynamicImageModal 
      :imageUrl="dropboxImageUrl" 
      ref="imageModal"
    />
  </div>
</template>

<script>
export default {
  data() {
    return {
      dropboxImageUrl: '' // Set this with your Dropbox direct link
    };
  },
  methods: {
    // Example method to update image
    fetchNewImageFromDropbox() {
      // Your Dropbox API call here
      this.dropboxImageUrl = 'https://dl.dropboxusercontent.com/s/.../image.jpg';
    }
  }
};
</script>
